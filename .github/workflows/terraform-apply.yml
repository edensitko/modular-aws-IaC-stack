name: Terraform Apply (Manual)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment to apply"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
      confirm:
        description: "Type 'APPLY' to confirm applying changes"
        required: true
        type: string
      skip_import:
        description: "Skip importing existing resources (use if you're sure resources don't exist)"
        required: false
        default: false
        type: boolean
      destroy_before_apply:
        description: "Destroy existing resources before applying (use if you're encountering resource conflicts)"
        required: false
        default: false
        type: boolean
      force_delete_resources:
        description: "Force delete specific resources causing conflicts (IAM role, policy, key pair)"
        required: false
        default: false
        type: boolean

jobs:
  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirm == 'APPLY' }}

    env:
      AWS_REGION: us-east-1
      ENV_NAME: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Credentials
        run: |
          echo "Verifying AWS credentials"
          aws sts get-caller-identity
          echo "AWS credentials verified successfully"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Init
        run: terraform init

      - name: Select Workspace
        run: terraform workspace select ${{ env.ENV_NAME }} || terraform workspace new ${{ env.ENV_NAME }}

      - name: Format Check
        run: terraform fmt -check -recursive

      - name: Validate Syntax
        run: terraform validate -no-color
        
      - name: List Files to be Deployed
        run: |
          echo "## Files that would be deployed for ${{ env.ENV_NAME }} environment:" > deployment-files.md
          echo "" >> deployment-files.md
          echo "### Modules:" >> deployment-files.md
          find modules -type f -name "*.tf" | sort >> deployment-files.md
          echo "" >> deployment-files.md
          echo "### Root Configuration:" >> deployment-files.md
          find . -maxdepth 1 -type f -name "*.tf" | sort >> deployment-files.md
          echo "" >> deployment-files.md
          echo "### Environment-specific Configuration:" >> deployment-files.md
          if [ -d "environments/${{ env.ENV_NAME }}" ]; then
            find environments/${{ env.ENV_NAME }} -type f | sort >> deployment-files.md
          else
            echo "No environment-specific files found for ${{ env.ENV_NAME }}" >> deployment-files.md
          fi
          
      - name: Upload Deployment Files List
        uses: actions/upload-artifact@v4
        with:
          name: deployment-files-${{ env.ENV_NAME }}
          path: deployment-files.md
          
      - name: Destroy Before Apply
        if: ${{ github.event.inputs.destroy_before_apply }}
        run: |
          echo "⚠️ DESTROYING EXISTING RESOURCES BEFORE APPLYING as requested"
          echo "This will destroy all existing resources in the ${{ env.ENV_NAME }} environment"
          echo "Proceeding with destroy in 10 seconds..."
          sleep 10
          terraform destroy -auto-approve \
            -var="policy_arn=arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess" \
            -var="role_name=aws-infra-ec2"
          echo "✅ Destroy completed. Proceeding with apply."
          
      - name: Import Existing Resources
        id: import
        if: ${{ !github.event.inputs.skip_import && !github.event.inputs.destroy_before_apply }}
        continue-on-error: true
        run: |
          echo "Attempting to import existing resources into Terraform state"
          # Import IAM role if it exists
          terraform import module.iam_role_ec2.aws_iam_role.this aws-infra-ec2 || echo "IAM role not imported, may not exist or already in state"
          # Import IAM policy if it exists
          terraform import module.iam_role_ec2.aws_iam_policy.dashboard_policy arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):policy/aws-infra-ec2-dashboard-policy || echo "IAM policy not imported, may not exist or already in state"
          # Import key pair if it exists
          terraform import module.key_pair.aws_key_pair.this eden-key-v2 || echo "Key pair not imported, may not exist or already in state"
          echo "Import attempts completed"
          
      - name: Skip Import Notification
        if: ${{ github.event.inputs.skip_import || github.event.inputs.destroy_before_apply }}
        run: echo "⚠️ Skipping import of existing resources as requested or because destroy was performed"
        
      - name: Force Delete Specific Resources
        if: ${{ github.event.inputs.force_delete_resources }}
        run: |
          echo "⚠️ FORCE DELETING SPECIFIC RESOURCES that are causing conflicts"
          # Delete IAM role policy attachments first
          echo "Detaching policies from IAM role aws-infra-ec2..."
          ATTACHED_POLICIES=$(aws iam list-attached-role-policies --role-name aws-infra-ec2 --query 'AttachedPolicies[*].PolicyArn' --output text || echo "")
          if [ ! -z "$ATTACHED_POLICIES" ]; then
            for POLICY_ARN in $ATTACHED_POLICIES; do
              echo "Detaching policy $POLICY_ARN from role aws-infra-ec2"
              aws iam detach-role-policy --role-name aws-infra-ec2 --policy-arn "$POLICY_ARN" || echo "Failed to detach policy"
            done
          fi
          
          # Delete IAM role
          echo "Deleting IAM role aws-infra-ec2..."
          aws iam delete-role --role-name aws-infra-ec2 || echo "Failed to delete IAM role, may not exist or still has dependencies"
          
          # Delete IAM policy
          echo "Deleting IAM policy aws-infra-ec2-dashboard-policy..."
          POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='aws-infra-ec2-dashboard-policy'].Arn" --output text || echo "")
          if [ ! -z "$POLICY_ARN" ]; then
            aws iam delete-policy --policy-arn "$POLICY_ARN" || echo "Failed to delete IAM policy"
          fi
          
          # Delete key pair
          echo "Deleting key pair eden-key-v2..."
          aws ec2 delete-key-pair --key-name eden-key-v2 || echo "Failed to delete key pair, may not exist"
          
          echo "✅ Force deletion of specific resources completed."
          sleep 5

      - name: Terraform Plan
        id: plan
        run: |
          echo "Planning infrastructure deployment for ${{ env.ENV_NAME }} environment"
          terraform plan -out=tfplan \
            -var="policy_arn=arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess" \
            -var="role_name=aws-infra-ec2"
            
      - name: Save Plan Output
        run: terraform show -no-color tfplan > tfplan.txt
        
      - name: Upload Plan as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.ENV_NAME }}
          path: tfplan.txt
          
      - name: Apply Warning
        run: |
          echo "⚠️ WARNING: ATTENTION! This will apply infrastructure changes to the ${{ env.ENV_NAME }} environment!"
          echo "⚠️ Review the plan carefully before proceeding."
          echo "Proceeding with apply in 10 seconds..."
          sleep 10
          
      - name: Terraform Apply
        run: |
          echo "Applying infrastructure changes to ${{ env.ENV_NAME }} environment"
          terraform apply -auto-approve tfplan
          
      - name: Apply Confirmation
        run: echo "✅ Infrastructure changes have been successfully applied to the ${{ env.ENV_NAME }} environment."